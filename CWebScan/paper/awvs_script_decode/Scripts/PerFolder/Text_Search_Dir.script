#include constants.inc;
#include helpers.inc;
#include string_helpers.inc;
#include debug_helpers.inc;
#include text_search_helpers.inc;
#include viewstate_parser.inc;
#include viewstate_audit.inc;
#include jsf_viewstate_audit.inc;
#include reporting_helpers.inc;
#noretest;
	
// **************************************************************************************
function alert(matchedText, xml)
{
	var ri = new TReportItem();
	ri.LoadFromFile(xml);
	ri.affects = file.fullPath;
	ri.alertPath = "Scripts/" + ri.Name;
	ri.request = file.request.headersString;
	ri.response = file.response.headersString;
	ri.fullResponse = file.response.body;
	if (matchedText) {
		ri.Details =  ri.Details + "[break]Pattern found: [pre][blue]" + matchedText + "[/blue][/pre]";
	}
	AddReportItem(ri);	
}
// **************************************************************************************
function alert2(debugHeader, headerValue, xml)
{
	var ri = new TReportItem();
	ri.LoadFromFile(xml);
	ri.affects = file.fullPath;
	ri.alertPath = "Scripts/" + ri.Name;
	ri.request = file.request.headersString;
	ri.response = file.response.headersString;
	ri.fullResponse = file.response.body;
	
	if (debugHeader) {
		ri.Details + "[break]A header named [dark]" + debugHeader + "[/dark] was found in the response. Decoded header value: [pre]" + headerValue + "[/pre]";
	}
	
	AddReportItem(ri);	
}
// **************************************************************************************
function alertFormMail(matchedText, xml)
{
	var ri = new TReportItem();
	ri.LoadFromFile(xml);
	ri.affects = file.fullPath;
	ri.alertPath = "Scripts/" + ri.Name;
	ri.request = file.request.headersString;
	ri.response = file.response.headersString;
	ri.fullResponse = file.response.body;
	if (matchedText) {
		ri.Details =  matchedText;
	}
	AddReportItem(ri);	
}
// **************************************************************************************
function fileShouldBeSearched()
{
	if (file.response.headerValue('content-type').indexOf('text') == -1 && file.response.headerValue('content-type').indexOf('application/x-trash') == -1)
		return false;
	
	if (file.response.body.length == 0) return false;
    if (file.response.body.length > 250*1024) return false;
	if (file.response.msg2 == 403 || file.response.msg2 == 401) return false; 
	return true;
}
// **************************************************************************************
function CheckViewState(file) {
	function alertViewStateMAC(file, viewstateStr)
	{
		var ri = new TReportItem();
		ri.LoadFromFile("ViewState_MAC_disabled.xml");
		ri.affects = file.fullPath;
		ri.alertPath = "Scripts/" + ri.Name;
		ri.request = file.request.headersString;
		ri.response = file.response.headersString;
		ri.fullResponse = file.response.body;
		if (viewstateStr) {
			ri.Details =  ri.Details + "[break]View state value (truncated): [dark]" + viewstateStr.trunc(128) + "[/dark].";
		}
		AddReportItem(ri);	
	}
    function alertJSFViewStateClientSide(file)
    {
        var ri = new TReportItem();
        ri.LoadFromFile("JSF_ViewState_Client_Side.xml");
        ri.affects = file.fullPath;
        ri.alertPath = "Scripts/" + ri.Name;
        ri.request = file.request.headersString;
        ri.response = file.response.headersString;
        ri.fullResponse = file.response.body;
        AddReportItem(ri);
    }
	
	var body = file.response.body;
	var contentType= file.response.headerValue('content-type');
	
	var pd = getParserData(body, contentType);
    if (pd) {
    	var forms = pd.getForms();
    	if (forms.count > 0) {	
    		for (var i=0; i<forms.count; i++) {
    				var myform = forms.item(i);
    				var formAction = myform.action;
    					for (var j=0; j<myform.inputs.count; j++) {
    						var inputName = myform.inputs.item(j).name;
    						var inputType = myform.inputs.item(j).inputType.toLowerCase();
							var inputValue = url2plain(myform.inputs.item(j).defaultValue);
//
//                            // look for ASP.NET viewstate
//    						if (
//    							(inputName == '__VIEWSTATE') &&
//    							(inputType == 'hidden')
//    							)
//    						{
//    							if (!ViewStateMACisEnabled(inputValue)) {
//    								alertViewStateMAC(file, inputValue);
//    							}
//							}
                            // look for JSF ViewState
                            if (
                                (inputName == 'javax.faces.ViewState') &&
                                (inputType == 'hidden')
                                )
                            {
                                if (JSFViewStateClientSide(inputValue)) {
                                    alertJSFViewStateClientSide(file);
                                }
                            }
                        }
			}
		}
    }
    	
    return false;	
}
// main entry point
// **************************************************************************************
var file = getCurrentDirectory(); // this is the sitefile
var matches = new classMatches();
var matchedText = "";
// should be searched?
if (file.isDir && fileShouldBeSearched()) 
{
	matchedText = TestForApplicationErrorMessages(matches, file.response.toString());
	if (matchedText) alert(matchedText, "Application_error_message_on_page.xml");
	matchedText = TestForASPNETPathDisclosure(matches, file.response.body);
	if (matchedText) alert(matchedText, "ASP.NET_path_disclosure.xml");
	matchedText = TestForColdFusionPathDisclosure(matches, file.response.body);
	if (matchedText) alert(matchedText, "ColdFusion_path_disclosure.xml");
	matchedText = TestForEmailAddresses(matches, file.response.body);
	if (matchedText) alert(matchedText, "Email_address_found.xml");
	matchedText = TestForInternalIP(matches, file.response.toString());
	if (matchedText) alert(matchedText, "Possible_internal_IP_address_disclosure.xml");
	matchedText = TestForMicrosoftOfficeInfo(matches, file.response.body);
	if (matchedText) alert(matchedText, "Microsoft_Office_possible_sensitive_information.xml");
	matchedText = TestForPhpInfo(matches, file.response.body);
	if (matchedText) alert(matchedText, "PHPInfo_page_found.xml", file.response.body);
	matchedText = TestForRemoteSWFInclusion(matches, file.response.body);
	if (matchedText) alert(matchedText, "Possible_remote_SWF_inclusion.xml");
    TestForSensitiveDataCCorSSN(matches, file.response.body);
	matchedText = TestForServerPathDisclosureWindows(matches, file.response.toString());
	if (matchedText) alert(matchedText, "Possible_server_path_disclosure_(Windows).xml");
	matchedText = TestForServerPathDisclosureUnix(matches, file.response.toString());
	if (matchedText) alert(matchedText, "Possible_server_path_disclosure_(Unix).xml");
	matchedText = TestForSourceCodeDisclosure(matches, file.response.body);
	if (matchedText) alert(matchedText, "Source_Code_Disclosure.xml");
	matchedText = TestForTrojanShellScript(matches, file.response.body);
	if (matchedText) alert(matchedText, "Trojan_shell_scripts_text_search.xml");
	matchedText = TestForUsernameOrPasswordDisclosure(matches, file.response.body);
	if (matchedText) alert(matchedText, "Possible_username_or_password_disclosure.xml");
	matchedText = TestForWordpressCredentials(matches, file.response.body);
	if (matchedText) alert(matchedText, "Wordpress_database_credentials_disclosure.xml");
	matchedText = TestForRSAPrivateKey(matches, file.response.body);
	if (matchedText) alert(matchedText, "RSA_private_key.xml");
	matchedText = TestMySQLConnectInfo(matches, file.response.body);
	if (matchedText) alert(matchedText, "MySQL_connect_info.xml");
	matchedText = TestForFlashAllowScriptAccess(matches, file.response.body);
	if (matchedText) alert(matchedText, "Flash_AllowScriptAccess.xml");
	matchedText = TestStruts2DevMode(matches, file.response.body);
	if (matchedText) alert(matchedText, "Struts_DevMode.xml");
	matchedText = TestDatabaseConnectionStringDisclosure(matches, file.response.body);
	if (matchedText) alert(matchedText, "Database_connection_string.xml");
	matchedText = TestMySQLUsernameDisclosure(matches, file.response.body);
	if (matchedText) alert(matchedText, "MySQL_Username_Disclosure.xml");
	debugHeader = TestChromeLogger(file.response);
	if (debugHeader) {
		var headerValue = b642plain(file.response.headerValue(debugHeader));
		alert2(debugHeader, headerValue, "Chrome_Logger_Information_Disclosure.xml");
	}
	matchedText = TestSFWebDebugToolbar(matches, file.response.body);
	if (matchedText) alert(matchedText, "Symfony_Debug_Toolbar.xml");
	matchedText = TestFormMailSpam(file.response.body, file.response.headerValue('content-type'));
	if (matchedText) alertFormMail(matchedText, "Form_Mail_Spam.xml");
	matchedText = TestDWR(file.response.body);
	if (matchedText) {
		KBase("Direct Web Remoting", "DWR is a Java library that enables Java on the server and JavaScript in a browser to interact and call each other as simply as possible. DWR was detected on URL: " + file.fullPath);
	}
	matchedText = TestStrutsDevMode(file.response.body);
	if (matchedText) alert(matchedText, "Struts_DevMode.xml");
    CheckViewState(file);
}