#engine 3.0;
#include constants.inc;
#include helpers.inc;
#include reporting_helpers.inc;
#include credentials_medium.inc;
#include string_helpers.inc;
#include cookies_helpers.inc;
#include os_detection.inc;
var deviseRoot      = new Array();
var deviseRootBF    = new Array();  // for brute force
var lastJob         = false;
var debug           = true;
// **************************************************************************************
function pathAlreadyAdded(path){
    for (var i=0; i<deviseRoot.length; i++){
        if (deviseRoot[i] == path) return true;
    }
    return false;
}
// **************************************************************************************
function pathBFAlreadyAdded(path){
    for (var i=0; i<deviseRootBF.length; i++){
        if (deviseRootBF[i] == path) return true;
    }
    return false;
}
// **************************************************************************************
function railsCookies(cookieString){
    var cookies = cookieString.split(";");
    for (var i = 0; i< cookies.length; i++) {
        var cookieData = cookies[i].trim().split("=");
        if (cookieData.length == 2) {
            var name = cookieData[0].trim();
            var value = cookieData[1].trim();
            var m = /([0-9A-Za-z%]+)--([A-Za-z0-9]{40})/.exec(value);
            if (m && m[1] && m[2] && m[2].length == 40) {
                return true;
            }
        }
    }
}
// **************************************************************************************
function alert(uri, vxml, job, details)
{	
	var ri = new TReportItem();
	ri.LoadFromFile(vxml);
	ri.affects = uri;
	ri.alertPath = "Scripts/" + vxml;
    if (details) ri.details = details;
	ri.setHttpInfo(job);
	
	AddReportItem(ri);	
}
/***********************************************************************************/
function confirmReq(uri)
{
    var http = new THTTPJob();
    http.verb = "GET";
    http.url  = scanURL;
    http.uri  = uri;
    http.execute();
    return (!http.wasError && http.responseStatus == 200 && http.response.body.indexOf("[password]") != -1 && http.response.body.indexOf("[email]") != -1);
}
/***********************************************************************************/
function req(uri, value)
{
    lastJob = new THTTPJob();
    lastJob.verb = "POST";
    lastJob.url  = scanURL;
    lastJob.uri  = uri + "password";
    lastJob.request.addHeader("Content-Type", "text/xml", true);
    lastJob.request.body = '<user><email type="integer">' + value + '</email></user>';
    lastJob.execute();
    return (!lastJob.wasError);
}
/***********************************************************************************/
function testUri(uri)
{
    // first, make a request with value 2, it should not redirect
    if (req(uri, '2') && lastJob.responseStatus == 200) {
        // another request with value, still it should not redirect
        if (req(uri, '1') && lastJob.responseStatus == 200) {
            // finally, a request with 0 => it should redirect
            if (req(uri, '0') && lastJob.responseStatus == 302) {
                    // check if location includes uri to be sure
                    var locationStr = lastJob.response.headerValue('location');
                    if (locationStr && locationStr.indexOf(uri) != -1 && locationStr.indexOf(uri + "/password") == -1) {
                    if (debug) trace("confirm it with one more request");
                    if (confirmReq(locationStr)) {
                        if (debug) trace("alert");
                        alert(uri + "password", "Rails_Devise_Authentication_Password_Reset.xml", lastJob);
                    }
                }
            }
        }
    }
}
/***********************************************************************************/
function lookForDevise(list)
{	
	for (var i=0;i<list.count; i++){
		var sf = list.getFile(i);		
		
		if(!sf.notFound && !sf.ignored && sf.scanSiteFile)
		{
            var found = false;
            var formAction = "";
            var formActionBF = "";
            if (sf.response.body.indexOf('[email]') != -1) {
                if (debug) trace("checking " + sf.fullPath);
                var foundAuthToken  = false;
                var foundEmail      = false;
                var foundPassword   = false;
                var foundRememberMe = false;
                var foundUTF8       = false;
                var foundCommit     = false;
                var validFormId     = false;
                var validFormAccept = false;
                var validFormAction = false;
                var validFormMethod = false;
                var tokens = htmlTokens(sf.response.body);
                var token  = null;
                while (token = tokens.nextToken()) {
                    // marker is present in token?
                    if (token.isTag) {
                        // look for INPUT tags
                        if (token.tagName == 'INPUT')
                        {
                            for(var j=0; j<token.paramCount; j++) {
                                var paramName = token.getParamName(j).toLowerCase();
                                var paramValue = token.getParamValue(j);
                                if (paramName == "name") {
                                    if (paramValue.indexOf("email") != -1) foundEmail = true;
                                    if (paramValue.indexOf("password") != -1) foundPassword = true;
                                    if (paramValue.indexOf("remember_me") != -1) foundRememberMe = true;
                                    if (paramValue == "authenticity_token") foundAuthToken = true;
                                    if (paramValue == "utf8") foundUTF8 = true;
                                    if (paramValue == "commit") foundCommit = true;
                                }
                            }
                        }
                        // look for FORM tags
                        if (token.tagName == 'FORM')
                        {
                            for(var j=0; j<token.paramCount; j++) {
                                var paramName = token.getParamName(j).toLowerCase();
                                var paramValue = token.getParamValue(j);
                                if (paramName == "id" && paramValue.startsWith("new_")) validFormId = true;
                                if (paramName == "accept-charset") validFormAccept = true;
                                if (paramName == "method" && paramValue == "post") validFormMethod = true;
                                if (paramName == "action") {
                                    formActionBF = paramValue;
                                }
                                if (paramName == "action" && sf.fullPath && sf.fullPath.startsWith(paramValue) && sf.fullPath != paramValue) {
                                    validFormAction = true;
                                    formAction = paramValue;
                                    formActionBF = paramValue;
                                    if (formAction.endsWith("password"))
                                        formAction = formAction.replace("password", "");
                                }
                            }
                        }
                    }
                }
                found = foundEmail && foundAuthToken && foundUTF8 && foundCommit && validFormId && validFormAccept && validFormMethod && validFormAction;
                if (found) {
                    if (debug) trace("found " + formAction);
                    if (!pathAlreadyAdded(formAction)) {
                        deviseRoot.push(formAction);
                    }
                }
                var foundBF = foundEmail && foundPassword && foundRememberMe && foundAuthToken && formActionBF;
                if (foundBF) {
                    if (debug) trace("found BF " + formActionBF);
                    if (!pathBFAlreadyAdded(formActionBF)) {
                        deviseRootBF.push(formActionBF);
                    }
                }
            }
		}
	}	
}
// **************************************************************************************
function getDeviseNonce(uri)
{
    lastJob = new THTTPJob();
    lastJob.url = scanURL;
    lastJob.verb = 'GET';
    lastJob.URI = uri;
    lastJob.addCookies = true;
    lastJob.execute();
    if (!lastJob.wasError && lastJob.response.msg2 == 200 && lastJob.response.body.indexOf('authenticity_token') != -1) {
        if (debug) trace("getting nonce from " + uri);
        var tokens = htmlTokens(lastJob.response.body);
        var token = null;
        while (token = tokens.nextToken()) {
            // marker is present in token?
            if (token.isTag) {
                // look for INPUT tags
                if (token.tagName == 'INPUT') {
                    var foundNonce = false;
                    var nonceValue = "";
                    for (var j = 0; j < token.paramCount; j++) {
                        var paramName = token.getParamName(j).toLowerCase();
                        var paramValue = token.getParamValue(j);
                        if (paramName == "name") {
                            if (paramValue == "authenticity_token")  foundNonce = true;
                        }
                        if (paramName == "value")  nonceValue = paramValue;
                    }
                    if (foundNonce && nonceValue) return nonceValue;
                }
            }
        }
    }
    return false;
}
// **************************************************************************************
function validCredentials(uri, nonce, username, password)
{
    username = username + "@" + scanHost;
    if (debug) {
        trace("testing username " + username + ", password " + password)
    }
    lastJob = new THTTPJob();
    lastJob.url = scanURL;
    lastJob.verb = 'POST';
    lastJob.URI = uri;
    lastJob.addCookies = true;
    lastJob.request.body = "utf8=%E2%9C%93&authenticity_token=" + plain2url(nonce) + "&user%5Bemail%5D=" + plain2url(username) + "&user%5Bpassword%5D=" + plain2url(password) + "&user%5Bremember_me%5D=0&user%5Bremember_me%5D=1&commit=Sign+in";
    lastJob.request.addHeader('Content-type', 'application/x-www-form-urlencoded', true);
    lastJob.execute();
    if (!lastJob.wasError && lastJob.response.msg2 == 302 && lastJob.response.headerValue("Set-Cookie"))
    {
        if (debug) {
            trace("!!!!!!!! found username " + username + ", password " + password)
        }
        return true;
    }
    return false;
}
// **************************************************************************************
//main()
// **************************************************************************************							 
var RailsApp = isRails || railsCookies(getCookies());
if (RailsApp || debug) {
	// rails application
	if (debug) trace('rails detected');
    var list = getNewFiles(loadHttp);
	lookForDevise(list);
	if (deviseRoot.length > 0)
	{
        for (var i=0; i<deviseRoot.length; i++){
            // test devise vulnerabilities
            if (debug) trace("devise location " + deviseRoot[i]);
            testUri(deviseRoot[i])
        }
	}
    // devise brute force
    if (deviseRootBF.length > 0)
    {
        for (var i = 0; i < deviseRootBF.length; i++) {
            if (debug) trace("devise BF start brute force on " + deviseRootBF[i]);
            // root URL where the brute force is happening
            var rootDir = deviseRootBF[i];
            var nonce = getDeviseNonce(rootDir);
            if (nonce) {
                if (debug) trace("authenticity_token = " + nonce);
                // look for false positives with invalid credentials to prevent false postives
                if (validCredentials(rootDir, nonce, randStr(8), randStr(8))) {
                    break;
                }
                // start testing credentials
                for (var i = 0; i < Usernames.length; i++) {
                    var user = Usernames[i];
                    for (var j = 0; j < Passwords.length; j++) {
                        var pass = Passwords[j];
                        if (validCredentials(rootDir, nonce, user, pass)) {
                            var details = "Username: [dark][bold]" + user + '@' + scanHost + "[/bold][/dark], password: [dark][bold]" + pass + "[/bold][/dark]";
                            alert(rootDir, "Devise_Weak_password.xml", lastJob, details);
                            break;
                        }
                    }
                }
            }
        }
    }
}
