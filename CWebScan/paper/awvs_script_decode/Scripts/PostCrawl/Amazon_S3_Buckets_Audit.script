#include helpers.inc;
#include constants.inc;
#include string_helpers.inc;
#include debug_helpers.inc;
// buckets to be tested
var buckets = new Array();
var lastJob = null;
var regex = /https?:\/\/([\w+\-_]+\.s3.amazonaws.com)/i;
// **************************************************************************************							 
function alert(vxml, job, details)
{	
	var ri = new TReportItem();
	ri.LoadFromFile(vxml);
	ri.affects = "/";
	ri.alertPath = "Scripts/" + vxml; 	
	ri.setHttpInfo(job);
	if (details) 
		ri.details = "Affected Amazon S3 bucket: [dark]" + details + "[/dark]";
	
	AddReportItem(ri);	
}							 			
/***********************************************************************************/
function prepareBucketsList(list)
{	
	for (var i=0;i<list.count; i++){	
		//trace(i);
		var sf = list.getFile(i);		
		
		if(!sf.notFound && !sf.ignored && sf.scanSiteFile)
		{		
			
			var tokens = htmlTokens(sf.response.body);
			var token = null;
			while (token = tokens.nextToken()) {
				// marker is present in token?
				if (token.isTag) {
	                
					// look for A HREF
	                if (token.tagName == 'A')
	                {
						for(var j=0; j<token.paramCount; j++) {
							var paramName = token.getParamName(j).toLowerCase();
							var paramValue = token.getParamValue(j);	                        
							
							if (paramName == "href") 
	                        {
	                        	m = regex.exec(paramValue);
	                        	if (m && m[1] && buckets.indexOf(m[1]) == -1)
	                        		buckets.push(m[1]);
	                        }
	                    }
	                }	
	                
					// look for IMG/SCRIPT/FRAME/IFRAME SRC
	                if (token.tagName == 'IMG' || token.tagName == 'SCRIPT' || token.tagName == 'FRAME' || token.tagName == 'IFRAME')
	                {
						for(var j=0; j<token.paramCount; j++) {
							var paramName = token.getParamName(j).toLowerCase();
							var paramValue = token.getParamValue(j);	                        
							
							if (paramName == "src") 
	                        {
	                        	m = regex.exec(paramValue);
	                        	if (m && m[1] && buckets.indexOf(m[1]) == -1)
	                        		buckets.push(m[1]);
	                        }
	                    }
	                }	                
	                                
				}
			}
		}	
	}	
}
/***********************************************************************************/
function testS3Bucket(url)
{
	//trace(url);
	lastJob = new THTTPJob();
	lastJob.verb = "GET";
	lastJob.url  = new TURL(url);	
	lastJob.uri  = '/';		
	lastJob.execute();
	
	if (!lastJob.wasError && !lastJob.notFound) 
	{
		if (lastJob.responseStatus == 200 && lastJob.response.body.indexOf('<ListBucketResult xmlns="http://s3.amazonaws.com/doc/2006-03-01/">') != -1 )
		{
			alert('Amazon_S3_public_bucket.xml', lastJob, url);
			return true;				
		}
	}		
	
	return false;
}
/***********************************************************************************/
/* main entry point */
// don't test this vulnerability twice
var tested = getGlobalValue("amazon_s3_buckets_audit");
if (!tested)
{	
	var list = getNewFiles(loadHttp);
	prepareBucketsList(list);
	if (buckets.length > 0) 
	{
		SetGlobalValue("amazon_s3_buckets_audit", 1, true);
		
		// prepare a KB item
		var kbi = new TKBaseItem()
		kbi.Name = 'Amazon S3 Buckets';
		kbi.Text = 'List of Amazon S3 Buckets used by this web application: [break][ul]';
		
		for (var i=0; i<buckets.length; i++)
			kbi.Text = kbi.Text + "[li]" + buckets[i] + "[/li]";
		kbi.Text = kbi.Text + "[/ul]";
		
		AddKBItem(kbi);
		// test buckets
		for (var i=0; i<buckets.length; i++){
			testS3Bucket('http://' + buckets[i] + '/');
		}
	}
}
