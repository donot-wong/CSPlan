#include constants.inc;
#include helpers.inc;
var targetUrl = new TURL(scanURL.url);
var scheme = getCurrentScheme();
targetUrl.path = scheme.path;
targetUrl.getVar = "";
{ // class for testing for arbitrary file deletion (AcuSensor)
	function classFileDeletion(scheme, inputIndex){
		this.scheme = scheme;
		this.inputIndex = inputIndex;
		this.variations = scheme.selectVariationsForInput(inputIndex);
		this.currentVariation = 0;
		this.lastJob = null;
		this.foundVulnOnVariation = false;
		this.injectionValidator = new TInjectionValidator(ACUINJSTART, ACUINJEND);
	}
	
	{
		// *********************************************************************************************
		// object used for injection test result
		// *********************************************************************************************	
		function InjectionResult(data, adItem){
			this.data = data;
			this.adItem = adItem;
		}
	}	
	
	// *********************************************************************************************
	// function to detect if AcuSensor data indicates an File Deletion vulnerability
	// params:  
	//	ad => AspectData object
	// returns: 
	//	an AspectDataItem if true / False
	// *********************************************************************************************
	classFileDeletion.prototype.isArbitraryFileDeletion = function(ad) {	
	var adItems = ad.getItemsWithKey("Delete_File");
	
	if (adItems && adItems.count) 
	for (var i=0; i<adItems.count; i++)
	{		
		var aditem = adItems.item(i);
		// check aspect data for signs of vulnerability
		if (aditem) {
			var stringList = aditem.getDataList();
			for (var k=0; k<stringList.count; k++) 
			{					
				var item = stringList.item(k);
				if (item.indexOf(this.injectionValidator.startMark) != -1) 
				{
					if (this.injectionValidator.isPathInjection(item))
						return new InjectionResult(item, aditem);						
				}					
			}				
		} 		
	}
	
	return false;
}
	
	
	classFileDeletion.prototype.request = function(value, testId)
	{	
		this.scheme.loadVariation(this.variations.item(this.currentVariation));
		this.scheme.setInputValue(this.inputIndex, value);
	
		this.lastJob = new THTTPJob();
		this.lastJob.url = targetUrl;
		if (scheme.targetHasAcuSensor) this.lastJob.addAspectHeaders();
		scheme.populateRequest(this.lastJob);
 
		this.lastJob.execute();
		return ((!this.lastJob.wasError || (this.lastJob.wasError && this.lastJob.errorCode == 0xF0003))); 
	}	
	classFileDeletion.prototype.alert = function(testValue, sourceFile, sourceLine, additionalInfo, acuSensor)
	{	
		this.foundVulnOnVariation = true;
		
		var ri = new TReportItem();
		ri.LoadFromFile("Arbitrary_File_Deletion.xml");
		if (acuSensor) ri.name = ri.name + " (verified)";
		ri.affects = this.scheme.path;
		ri.alertPath = "Scripts/Arbitrary File Deletion";
		ri.parameter = this.scheme.getInputName(this.inputIndex);
		ri.parameterValue = testValue;		
		
		ri.setHttpInfo(this.lastJob);		
		
		ri.sensorSourceFile = sourceFile;
		ri.sensorSourceLine = sourceLine;
		ri.sensorAdditional = additionalInfo;		
		ri.details = this.scheme.getInputTypeStr(this.inputIndex) + " input [bold][dark]" + this.scheme.getInputName(this.inputIndex) + "[/dark][/bold] was set to [bold][dark]" + testValue + "[/dark][/bold]";
		AddReportItem(ri);	
	}		
	
	classFileDeletion.prototype.testInjection = function(value, testId)
	{
		if (!this.request(value, testId)) return false;
		// if AcuSensor is enabled
		if (this.lastJob.hasAspectData) {
			// get aspect data information
			var ad = this.lastJob.getAspectData(); 
			
			var injRes = this.isArbitraryFileDeletion(ad, this.injectionValidator);
					
			if (injRes && injRes.adItem) {				
				var additional = "File: " + injRes.data + "\r\n" + injRes.adItem.additional;
				this.alert(value, injRes.adItem.FileName, injRes.adItem.lineNumber, additional, 1);
				return true;
			}
		}
		
		return false;
	}
	
	classFileDeletion.prototype.startTesting = function()
	{
		for (var i=0; i < this.variations.count; i++) 
		{
			// don't test further variations
			if (this.foundVulnOnVariation) break;
			this.currentVariation = i;
			if (this.testInjection("ACUSTARTFILEDELETE/../../xxx\\..\\..\\ACUENDFILEDELETE")) continue;
			if (this.testInjection("/ACUSTARTFILEDELETE/ACUENDFILEDELETE")) continue;
			if (this.testInjection("\\ACUSTARTFILEDELETE\\ACUENDFILEDELETE")) continue;
		}
	}	
}
// main entry point 
if (scheme.targetHasAcuSensor) 
	for (var i=0;i<scheme.inputCount; i++)
	{
		var tester = new classFileDeletion(scheme, i);	
		tester.startTesting();
		ScriptProgress(ComputeProgress(i, scheme.inputCount));
		tester = null;
	}
