#include constants.inc;
#include helpers.inc;
#include string_helpers.inc;
var targetUrl = new TURL(scanURL.url);
var scheme = getCurrentScheme();
targetUrl.path = scheme.path;
targetUrl.getVar = "";
var lastJob = null;
var debug = false;
var userInputIndex 		= -1;
var passInputIndex 		= -1;
var username_input_regexes = [
	/username/i,
	/uname/i,
	/user/i,
	/usr/i,
	/name/i,
	/^u$/i,
	/^nom$/i,
	/^nick$/i,
	/^utilisateur$/i,
	/^benutzer$/i,
	/^utente$/i,
	/log/i,
	/usuario/i
];
var email_input_regexes = [
	/mail/i,
	/email/i,
	/e-mail/i,
	/e_mail/i
];
//--------------------------------------------------------------------------------------------------------
function alert(path, lastJob, details, vulnxml)
{
    var ri = new TReportItem();
    ri.LoadFromFile(vulnxml);
    ri.affects = path;
    ri.alertPath = "Scripts/" + vulnxml;
    ri.setHttpInfo(lastJob);
    ri.details = details;
    AddReportItem(ri);
}
//--------------------------------------------------------------------------------------------------------
function request(username, password)
{	
	lastJob = new THTTPJob();
	lastJob.url = targetUrl;
	lastJob.addCookies = false;
	lastJob.autoRedirect = false;
	
	scheme.setInputValue(userInputIndex, username);
	scheme.setInputValue(passInputIndex, password);
	
	scheme.populateRequest(lastJob);
	
    // populate referer tag - some sites may need it
    if (!lastJob.request.headerExists('Referer'))
        lastJob.request.addHeader('Referer', scanURL.url, false);
	lastJob.execute();
    return (!lastJob.wasError || (lastJob.wasError && lastJob.errorCode == 0xF0003));
}
//--------------------------------------------------------------------------------------------------------
function startTesting(username, passwordInputName)
{
    var TimeLONG1   = 0;
    var TimeShort1  = 0;
    var TimeShort2  = 0;
    var TimeLONG2   = 0;
    var TimeShort3  = 0;
    var detailsReqHistory = "";
    if (debug) trace("startTesting " + username);
    // make a request with a very long password (1M characters)
    if (!request(username, "A".repeat(1000000))) return false;
    TimeLONG1 = lastJob.responseDuration;
    if (debug) trace("TimeLONG1 => " + TimeLONG1);
    detailsReqHistory += "[li]password of 1000000 characters => [bold]" + (lastJob.responseDuration/1000) + " s[/bold][/li]";
    if (TimeLONG1 < 25000) {
        // not interested if doesn't stay at least 25 seconds
        return false;
    }
    // make a request with a short password
    if (!request(username, "B".repeat(100))) return false;
    TimeShort1 = lastJob.responseDuration;
    if (debug) trace("TimeShort1 => " + TimeShort1);
    detailsReqHistory += "[li]password of 100 characters => [bold]" + (lastJob.responseDuration/1000) + " s[/bold][/li]";
    if (TimeShort1 > 5000) {
        // not interested if it stays long even for normal requests
        return false;
    }
    // make a second request with a short password
    if (!request(username, "C".repeat(100000))) return false;
    TimeShort2 = lastJob.responseDuration;
    if (debug) trace("TimeShort2 => " + TimeShort2);
    detailsReqHistory += "[li]password of 100000 characters => [bold]" + (lastJob.responseDuration/1000) + " s[/bold][/li]";
    if (TimeShort2 <= TimeShort1) {
        // not interested if the second time is shorter
        return false;
    }
    // make a second request with a very long password (1M characters)
    if (!request(username, "D".repeat(1100000))) return false;
    TimeLONG2 = lastJob.responseDuration;
    if (debug) trace("TimeLONG2 => " + TimeLONG1);
    detailsReqHistory += "[li]password of 1100000 characters => [bold]" + (lastJob.responseDuration/1000) + " s[/bold][/li]";
    if (TimeLONG2 < 25000) {
        // not interested if doesn't stay at least 25 seconds
        return false;
    }
    // make the last request with a short password
    if (!request(username, "E".repeat(500))) return false;
    TimeShort3 = lastJob.responseDuration;
    if (debug) trace("TimeShort3 => " + TimeShort3);
    detailsReqHistory += "[li]password of 500 characters => [bold]" + (lastJob.responseDuration/1000) + " s[/bold][/li]";
    if (TimeShort3 > 5000) {
        // not interested if it stays long even for normal requests
        return false;
    }
    var detailsStr = "Vulnerable password input: [bold][dark]" + passwordInputName + "[/dark][/bold].[break][break]Tests performed: [ul]" + detailsReqHistory + "[/ul]";
    // it looks like we found a vulnerability. we need to report it
    alert(scheme.path, lastJob, detailsStr, "Long_Password_DOS.xml");
}
// ******************************************************************************************************************
// main() entry point 
// ******************************************************************************************************************
// don't test more than one time
var tested = getGlobalValue("LongPasswordDOS");
if (!tested)
{
    // determine if we need to test this scheme
	var testScheme 		    = false;
	var havePassword 	    = false;
	var havePassword2 	    = false;
	
	var userEchoed 		    = false;
	var passwordInputName   = "unknown";
	// check if we have a password input
	for (var i=0;i<scheme.inputCount; i++)
	{
		if (scheme.getInputFlags(i) & INPUT_FLAG_IS_PASSWORD) 
		{
			if (!havePassword) {
                havePassword = true;
                passwordInputName = url2plain(scheme.getInputName(i));
            }
			else havePassword2 = true;
			
			passInputIndex = i;
			if (debug) trace("found password input: " + url2plain(scheme.getInputName(i)));
		}
	}
	
	// look for a username input and a password input
	if (havePassword && !havePassword2 && (passInputIndex >= 0)) {
		var found_user_input = false;
		var user_input_is_email = false;
		
		for (var i=0;i<scheme.inputCount; i++)
		if (!found_user_input)
		{
			
			user_input_name = url2plain(scheme.getInputName(i));
			
			for (var j=0; j<username_input_regexes.length;j++)			
			if (!found_user_input)
			{
				if (username_input_regexes[j].exec(user_input_name))
					if (!(scheme.getInputFlags(i) & INPUT_FLAG_IS_BUTTON))
					{
						userInputIndex = i;
						found_user_input = true;
						if (debug) trace("found user input: " + user_input_name);
						break;
					}
			}					
			// let's look through email regexes			
			for (var j=0; j<email_input_regexes.length;j++)			
			if (!found_user_input)
			{
				if (email_input_regexes[j].exec(user_input_name)){
					userInputIndex = i;
					found_user_input = true;
					user_input_is_email = true;
					//trace(user_input_name);
					break;
				}
			}		
		}
		
		// if we found the username input then we are OK
		if (found_user_input) 
			testScheme = true;	
	}
		
	
	if (testScheme) 
	{
		if (debug) trace("testScheme");
		
        SetGlobalValue("LongPasswordDOS", 1, true);
		username = 'admin';
		if (user_input_is_email) username = username + '@' + scanHost;
        // start testing
        startTesting(username, passwordInputName);
	}
}