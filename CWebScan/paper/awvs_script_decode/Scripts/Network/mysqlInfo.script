#include classMySQL.inc;
#include reporting_helpers.inc;
if(IsPortOpen(3306))
{
	
	var mysql  = new mySQLHandlerClass(ScanHost, 3306); 
	var retval = mysql.open();
	if(retval == 0)
	{
		// the mysql server hello with an error
		// asta se intampla cand serverul refuza conectiuni de la un ip de exemplu pentru prea multe erori
		trace(mysql.intErrorNumber);
		trace(mysql.strErrorState);
		trace(mysql.strError);
		mysql.disconect();
	}
	if(retval == 1)
	{
		//check for vulnerabilities by version
		if(mysql.server_version.match(/^5\.0\.([0-9]|[1-3][0-9]|4[0-4])($|[^0-9])/))
		{
			trace("MySQL Community Server 5.0 to 5.0.45 Multiple Vulnerabilities");
			ReportItem("mySQL_5_0_45.xml", "MySQL Community Server 5.0 to 5.0.45 Multiple Vulnerabilities");
		}
		if(mysql.server_version.match(/^5\.1\.([0-9]($|[^0-9])|1[1-7]($|[^0-9]))/))
		{
			trace("MySQL 5.1 to  5.1.18 Multiple Vulnerabilities");
			ReportItem("mysql_5_1_18.xml", "MySQL 5.1 to  5.1.18 Multiple Vulnerabilities");
		}		
		if(mysql.server_version.match(/^5\.0\.([0-9]|[1-4][0-9]|50)($|[^0-9])/))
		{
			trace("MySQL Community Server Symlink Attack Vulnerability");
			ReportItem("mySQL_symlink_attack.xml", "MySQL Community Server Symlink Attack Vulnerability");
		}
		if(mysql.server_version.match(/^(5\.1\.([0-9]|1[0-9]|2[0-2])|6\.0\.[0-3])($|[^0-9])/))
		{
			trace("MySQL Community Server to 5.1.23 / 6.0.4 Multiple Vulnerabilities");
			ReportItem("mysql_5_1_23.xml", "MySQL Community Server to 5.1.23 / 6.0.4 Multiple Vulnerabilities");
		}
		if(mysql.server_version.match(/^([0-3]\.|4\.0\.([0-9]|1[0-9]|2[0-3])([^0-9]|$)|4\.1\.[0-9][^0-9])/))
		{
			trace("MySQL server older than 4.0.24 or 4.1.10a");
			ReportItem("mysql_older_4_0_24_4_1_10a.xml", "MySQL server older than 4.0.24 or 4.1.10a");
		}
		if(mysql.server_version.match(/^([0-3]\.|4\.0\.([0-9]|1[0-9]|20)([^0-9]|$))/))
		{
			trace("MySQL server older than 4.0.21");
			ReportItem("mysql_older_4_0_21.xml", "MySQL server older than 4.0.21");
		}
		if(mysql.server_version.match(/^(3\.([0-9]\.|1[0-9]\.|2[0-2]\.|23\.(([0-9]|[1-4][0-9]|5[0-8])[^0-9]))|4\.0\.([0-9]|1[0-9]|20)[^0-9])/))
		{
			trace("MySQL server older than 4.0.21 or 3.23.59");
			ReportItem("mysql_older_4_0_21_3_23_59.xml", "MySQL server older than 4.0.21 or 3.23.59");
		}
		if(mysql.server_version.match(/^3\.(([0-9]\..*|(1[0-9]\..*)|(2[0-2]\..*))|23\.([0-4][0-9]|5[0-3])[^0-9])|4\.0\.[0-5][^0-9]/))
		{
			trace("MySQL server older than 4.0.21 or 3.23.59");
			ReportItem("mysql_older_3_23_54_4_0_6.xml", "MySQL server older than 4.0.21 or 3.23.59");
		}
		if(mysql.server_version.match(/^4\.0\.([0-9]([^0-9]|$)|1[0-9]|2[0-4])|4\.1\.[0-5]([^0-9]|$)|5\.0\.[0-4]([^0-9]|$)/))
		{
			trace("MySQL Buffer Overflow in User Defined Functions");
			ReportItem("mysql_Buffer_Overflow_in_User_Def_Func.xml", "MySQL Buffer Overflow in User Defined Functions");
		}		
		if(mysql.server_version.match(/^3\.(([0-9]\..*)|(1[0-9]\..*)|(2(([0-2]\..*)|3\.(([0-9]$)|([0-2][0-9])|(3[0-5])))))/))
		{
			trace("MySQL Buffer Overflow in User Defined Functions");
			ReportItem("mysql_older_3_23_36.xml", "MySQL server older than 3.23.36");
		}
		if(mysql.server_version.match(/^5\.0\.([0-9]|[1-4][0-9]|5[01])($|[^0-9])/))
		{
			trace("MySQL Enterprise Server v.5.0.52 Multiple Vulnerabilities");
			ReportItem("mysql_ent_5_0_52.xml", "MySQL Enterprise Server v.5.0.52 Multiple Vulnerabilities");
		}
		
		
		// the mysql server hello correctly, interesting info
		var info = "";
		trace(mysql.server_version);
		info += "Server version: " + mysql.server_version + "\r\n";
		
		trace(mysql.protocol_version);
		info += "Protocol version: " + mysql.protocol_version + "\r\n";
		
		// capabilities pritiprint
		trace(mysql.str_server_capabilities);
		info += "Server capabilities: " + mysql.str_server_capabilities + "\r\n";
		
		//language code
		trace(mysql.server_language);
		info += "Language code: " + mysql.server_language + "\r\n";
		
		//Thread ID
		trace(mysql.str_thread_id);
		info += "Thread ID: " + mysql.str_thread_id + "\r\n";		
		
		//Status
		trace(mysql.str_server_status);
		info += "Status: " + mysql.str_server_status + "\r\n";		
		trace(info);
				
		KBase("MySQL server running", "A MySQL server is running on TCP port 3306.[break]Information gathered from this service:[pre]" + info + "[/pre]");
		
		mysql.disconect();
	}
}
