#engine 3.3;
#include constants.inc;
#include helpers.inc;
#include string_helpers.inc;
#include json_helpers.inc;
#include debug_helpers.inc;
#noretest;
var urls2check 	= {};
var linksQuota 	= 25;
var debug = false;
var licKey = false;
// **************************************************************************************
function alert(details, db, url)
{
    var fname = "Malware.xml";
    var ri = new TReportItem();
    ri.LoadFromFile(fname);
    ri.details = details;
    ri.affects = "Web Server";
    ri.alertPath = "Scripts/" + fname;
	if (db == "Google Safe Browsing database") {
		ri.addReference("Google Safe Browsing Database for this URL", "https://safebrowsing.google.com/safebrowsing/diagnostic?&site=" + encodeURI(url));
	}
    AddReportItem(ri);
}
// **************************************************************************************
function checkListOfURlsViaSB(listOfURLs)
{
    var lastJob = new THTTPJob();
    lastJob.url = new TURL("https://sb.bxss.me/");
    lastJob.verb = 'POST';
    lastJob.secure = true;
    lastJob.timeout = 10000;
    lastJob.request.body = JSON.stringify({"urls": listOfURLs});
    lastJob.request.addHeader('Content-type', 'application/x-www-form-urlencoded', true);
    lastJob.request.addHeader('WVSSB', 'true', true);
    lastJob.request.addHeader('WVSSBLK', licKey, true);
    lastJob.execute();
    if (!lastJob.wasError && lastJob.responseStatus == 200)
    {
        return lastJob.response.body;
    }
    return false;
}
// **************************************************************************************							 
function checkURLs(listOfURLs)
{
	if (debug) trace("checking " + listOfURLs.length + " links ")
		
	// mark them as checked
	for (var i=0; i<listOfURLs.length; i++) {
		var url = listOfURLs[i];
		urls2check[url]['checked'] = true;
		//trace(url);
	}
    // response
    respText = checkListOfURlsViaSB(listOfURLs);
    if (respText) {
        // parse response
        resp = JSON.parse(respText);
        // could be parsed?
        if (resp) {
            for(var url in resp) {
                if (resp[url] !== false) {
                    if (debug) trace(url + " => " + resp[url]);
                    urls2check[url]['malware'] = resp[url];
                }
            }
        }
    }
}
// **************************************************************************************
function SBIsAlive()
{
    if (debug) trace("SBIsAlive?");
    var listOfURLs = ["http://malware.testing.google.test/testing/malware/"];
    // response
    respText = checkListOfURlsViaSB(listOfURLs);
    if (respText) {
        // parse response
        resp = JSON.parse(respText);
        // could be parsed?
        if (resp) {
            for(var url in resp) {
                if (resp[url] !== false) {
                    if (debug) trace("SBIsAlive? YES");
                    return true;
                }
            }
        }
    }
    if (debug) trace("SBIsAlive? NO");
    return false;
}
// **************************************************************************************
// main()
// **************************************************************************************
licKey = getGlobalValue('licensing.licKey');
// don't do anything unless we are activated and have a license key
if (licKey && licKey.length == 19) {
    // make an associative array with all external URLs
    var eurls = getExternalURLs();    
    var hosts = {}
    
    for (var i=0; i<eurls.count; i++) {
    	var urlHost = eurls.item(i).url.host;
    	if (!(urlHost in hosts)) {	    	
	        var urlStr = eurls.item(i).url.url;
	        
	        urls2check[urlStr] = {};
	        urls2check[urlStr]['checked'] = false;
	        urls2check[urlStr]['malware'] = false;
	        urls2check[urlStr]['linkedFrom'] = [];
	        // fill in linked from information
	        for (var j=0; j<eurls.item(i).linkedFrom.count; j++) {
	            urls2check[urlStr]['linkedFrom'].push(eurls.item(i).linkedFrom.item(j).url);
	        }
	        
	        hosts[urlHost]=1;
        }
    }
    // check them
    if (eurls.count && SBIsAlive())
    {
        var iterations = 0;
        while (true) {
            // prevent an infinite loop
            if (iterations < 50000) iterations++; else break;
            var cnt = 0;
            var listOfURLs = [];
            for(var url in urls2check) {
              if(urls2check.hasOwnProperty(url)) {
                if (!urls2check[url]['checked']) {
                    // not checked, add it to the list to check
                    if (cnt < linksQuota) {
                        listOfURLs.push(url);
                        cnt++;
                    } else break;
                }
              }
            }
            // no more links to check
            if (cnt == 0) break;
            else checkURLs(listOfURLs); // check them
        }
        // analyze results, look for the malware
        for(var url in urls2check) {
          if(urls2check.hasOwnProperty(url)) {
            if(urls2check[url]['malware'] !== false) {
                var db = "Unknown";
                if (urls2check[url]['malware'] == "g") db = "Google Safe Browsing database";
                else if (urls2check[url]['malware'] == "y") db = "Yandex Safe Browsing database";
                if (debug) trace("malware: " + url + " => " + db)
                var details = "The URL [dark][bold]" + url + "[/bold][/dark] is marked as malware in " + db + ".[break][break]";
                details += "This malicious URL was referenced from the following pages of your website: [break][break]";
                details += "[ul]";
                for (var i=0; i<urls2check[url]['linkedFrom'].length; i++) {
                    details += "[li]" + urls2check[url]['linkedFrom'][i] + "[/li]";
                }
                details += "[/ul]";
				if (db == "Yandex Safe Browsing database") {
					details = details + "[break][break][bold]Yandex tested[/bold]";
				}
                alert(details, db, url);
            }
          }
        }
    }
}