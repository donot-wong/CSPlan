<?xml version="1.0" standalone="no"?>
<WebApplicationTest>
	<TestDescription name="Remote XSL inclusion" version="0.1" released="20080502" updated="20140228" protocol="HTTP" mayproxy="true" affects="file" severity="high" alert="success" type="Validation">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" FolowRedirection="true" DetaliedInformation="" SendCookies="true" AlertTags="file_inclusion" HasPrecondition="false" SendAuth="true" ValidateSession="true" CVE="" CWE="CWE-20" CVSSVer="2.0" CVSSScore="6.8" CVSSDescr="AV:N/AC:M/Au:N/C:P/I:P/A:P" CVSSScoreTemp="6.8" CVSSScoreEnv="6.8"/>
		<Copyright/>
		<Description>This script is possibly vulnerable to remote XSL inclusion. The path to the XSL file can be controlled by the attacker. Therefore, it's possible to include malicious XSL files.</Description>
		<ApplicableTo>
			<Platform>
				<OS>All</OS>
				<Arch>i386</Arch>
			</Platform>
			<WebServer>All</WebServer>
			<ApplicationServer>All</ApplicationServer>
		</ApplicableTo>
		<TriggerOn event="scheme_host_port">
			<Match type="regex">.*</Match>
		</TriggerOn>
		<Impact>It is possible for a remote attacker to include a remote XSL file from local or remote resources. An attacker can use this flaw to perform XSS (cross-site scripting attacks), partial file inclusion attacks and in some case even execute PHP code.</Impact>
		<Recommendation>Edit the source code to ensure that input is properly validated. Where is possible, it is recommended to make a list of accepted filenames and restrict the input to that list.</Recommendation>
		<Reference database="The hidden dangers of XSLTProcessor - Remote XSL injection" URL="http://www.acunetix.com/blog/web-security-zone/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/"/>
	</TestDescription>
	<Connection scheme="${scheme}" host="${host}" port="${port}">
		<Step name="testfile">
			<Request>
				<MessageHeader>
					<Method>GET</Method>
					<URI>${scheme}://${host}:${port}${path}</URI>
					<Version>HTTP/1.0</Version>
				</MessageHeader>
				<MessageBody>
					<Separator/>
					<Item encoding="text">${post}</Item>
				</MessageBody>
			</Request>
			<Response>
				<SetVariable name="ResponseCode" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="status">^.*\s(\d\d\d)\s</Source>
				</SetVariable>
				<SetVariable name="redir302" type="string">
					<Description>Check to see if we are being redirected to another page</Description>
					<Source source="header">^Location: (.*)$</Source>
				</SetVariable>
				<SetVariable name="HtmlParser" type="htmlparser">
					<Description>An extension to VulnXML. A variable of type htmlparser</Description>
					<Source source="body">^(.*)$</Source>
				</SetVariable>
				<SetVariable name="XSLStylesheet" type="string">
					<Description>check to see if the whole XSL stylesheet was included.</Description>
					<Source source="body">(&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:php="http://php.net/xsl"&gt;)</Source>
				</SetVariable>
			</Response>
			<TestCriteria type="success">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>200</Value>
					<Compare variable="${IsCustom404}" test="eq">
						<Value>false</Value>
						<!-- /etc/password contents -->
						<Compare variable="${HtmlParser}" test="cont">
							<Value>tag=script;textwithin=alert('Acunetix-WVS-remote-xsl-inclusion-test')</Value>
							<Compare variable="${XSLStylesheet}" test="eq">
								<Value/>
							</Compare>
						</Compare>
					</Compare>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>404</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<ErrorMessage>This test was redirected to '${redir302}'. The program that generated this test does not know how to handle 302 responses. Unfortunately, they are quite common in the Microsoft arena. Please update the generator, and rebuild these tests</ErrorMessage>
				<Compare variable="${ResponseCode}" test="eq">
					<Value>302</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<ErrorMessage>This message indicates a failure to properly execute the test, or an unhandled HTTP response. Please investigate further, and modify this test before re-executing it. The server returned ${ResponseCode}</ErrorMessage>
				<Compare variable="${ResponseCode}" test="neq">
					<Value>200</Value>
				</Compare>
			</TestCriteria>
		</Step>
	</Connection>
	<Variable name="file" type="string">
		<Description>Site file to be tested</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="test" type="string">
		<Description>A list of values for all SQL Injection tests to be performed</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="combinations" type="string">
		<Description>List of parameter combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="path" type="string">
		<Description>List of combinations for this test</Description>
		<Item encoding="Text">${file}${combinations}</Item>
	</Variable>
	<Variable name="post" type="string">
		<Description>Values for POST</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="filename" type="string">
		<Description>Site filename</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="cookie" type="string">
		<Description>Cookie combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="headers" type="string">
		<Description>Headers combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
</WebApplicationTest>
