<?xml version="1.0" encoding="utf-8"?>
<WebApplicationTest>
	<TestDescription name="HTML injection" version="0.1" released="20080307" updated="20140808" protocol="FTP" mayproxy="false" affects="server" severity="medium" alert="success" type="Validation">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" DetaliedInformation="" AlertTags="abuse_of_functionality" CVE="" CWE="CWE-80" CVSSVer="2.0" CVSSScore="5.0" CVSSDescr="AV:N/AC:L/Au:N/C:N/I:P/A:N" CVSSScoreTemp="" CVSSScoreEnv="" CVSS3Descr="CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"></WASPDescription>
		<Copyright></Copyright>
		<Description>HTML injection is an attack that is similar to Cross-site Scripting (XSS). While in the XSS vulnerability the attacker can inject and execute Javascript code, the HTML injection attack only allows the injection of certain HTML tags.  When an application does not properly handle user supplied data, an attacker can supply valid HTML code, typically via a parameter value, and inject their own content into the page. This attack is typically used in conjunction with some form of social engineering, as the attack is exploiting a code-based vulnerability and a user's trust.

[break][break]
Attack scenario (OWASP)[break][break]
A possible attack scenario is demonstrated below:
[ul]
[li]Attacker discovers injection vulnerability and decides to use an HTML injection attack[/li]
[li]Attacker crafts malicious link, including his injected HTML content, and sends it to a user via email[/li]
[li]The user visits the page due to the page being located within a trusted domain[/li]
[li]The attacker's injected HTML is rendered and presented to the user asking for a username and password[/li]
[li]The user enters a username and password, which are both sent to the attackers server[/li]
[/ul]</Description>
		<ApplicableTo>
			<Platform>
				<OS>*</OS>
				<Arch>*</Arch>
			</Platform>
			<WebServer>*</WebServer>
			<ApplicationServer>*</ApplicationServer>
		</ApplicableTo>
		<Impact>An attacker can inject arbitrary HTML code into the vulnerable page.</Impact>
		<Recommendation>Your script should filter metacharacters from user input.</Recommendation>
		<Reference database="HTML Injection" URL="https://www.owasp.org/index.php/HTML_Injection"></Reference>
		<Reference database="CERT advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests" URL="http://www.cert.org/advisories/CA-2000-02.html"></Reference>
		<Reference database="Postcards from the post-XSS world" URL="http://lcamtuf.coredump.cx/postxss/"></Reference>
	</TestDescription>
</WebApplicationTest>