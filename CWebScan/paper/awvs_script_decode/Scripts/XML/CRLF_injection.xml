<?xml version="1.0" encoding="utf-8"?>
<WebApplicationTest>
	<TestDescription name="CRLF injection/HTTP response splitting" version="0.1" released="20040903" updated="20160203" protocol="HTTP" mayproxy="true" affects="file" severity="medium" alert="success" type="Validation">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" FolowRedirection="false" DetaliedInformation="" SendCookies="true" AlertTags="crlf_injection,http_response_splitting" HasPrecondition="false" SendAuth="true" ValidateSession="true" CVE="" CWE="CWE-113" CVSSVer="2.0" CVSSScore="5.0" CVSSDescr="AV:N/AC:L/Au:N/C:N/I:P/A:N" CVSSScoreTemp="" CVSSScoreEnv="" CVSS3Descr="CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N"></WASPDescription>
		<Copyright></Copyright>
		<Description>This script is possibly vulnerable to CRLF injection attacks. [break][break]HTTP headers have the structure "Key: Value", where each line is separated by the CRLF combination. If the user input is injected into the value section without properly escaping/removing CRLF characters it is possible to alter the HTTP headers structure.[break]
HTTP Response Splitting is a new application attack technique which enables various new attacks such as web cache poisoning, cross user defacement, hijacking pages with sensitive user information and cross-site scripting (XSS). The attacker sends a single HTTP request that forces the web server to form an output stream, which is then interpreted by the target as two HTTP responses instead of one response.</Description>
		<ApplicableTo>
			<Platform>
				<OS>All</OS>
				<Arch>i386</Arch>
			</Platform>
			<WebServer>All</WebServer>
			<ApplicationServer>All</ApplicationServer>
		</ApplicableTo>
		<TriggerOn event="scheme_host_port">
			<Match type="regex">.*</Match>
		</TriggerOn>
		<Impact>Is it possible for a remote attacker to inject custom HTTP headers. For example, an attacker can inject session cookies or HTML code. This may conduct to vulnerabilities like XSS (cross-site scripting) or session fixation.</Impact>
		<Recommendation>You need to restrict CR(0x13) and LF(0x10) from the user input or properly encode the output in order to prevent the injection of custom HTTP headers.</Recommendation>
		<Reference database="Acunetix CRLF Injection Attack" URL="http://www.acunetix.com/websitesecurity/crlf-injection.htm"></Reference>
		<Reference database="Whitepaper -  HTTP Response Splitting" URL="http://packetstormsecurity.org/papers/general/whitepaper_httpresponse.pdf"></Reference>
		<Reference database="Introduction to HTTP Response Splitting" URL="http://www.securiteam.com/securityreviews/5WP0E2KFGK.html"></Reference>
	</TestDescription>
	<Connection scheme="${scheme}" host="${host}" port="${port}">
		<Step name="testfile">
			<Request>
				<MessageHeader>
					<Method>GET</Method>
					<URI>${scheme}://${host}:${port}${path}</URI>
					<Version>HTTP/1.0</Version>
				</MessageHeader>
				<MessageBody>
					<Separator></Separator>
					<Item encoding="text">${post}</Item>
				</MessageBody>
			</Request>
			<Response>
				<SetVariable name="ResponseCode" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="status">^.*\s(\d\d\d)\s</Source>
				</SetVariable>
				<SetVariable name="OurInjectedHeader" type="string">
					<Description>Check if our header has been injected</Description>
					<Source source="header">(?i)\n(SomeCustomInjectedHeader\s*:\s*injected_by_wvs)</Source>
				</SetVariable>
			</Response>
			<TestCriteria type="success">
				<Compare variable="${OurInjectedHeader}" test="neq">
					<Value></Value>
					<Compare variable="${IsCustom404}" test="eq">
						<Value>false</Value>
					</Compare>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>404</Value>
				</Compare>
			</TestCriteria>
		</Step>
	</Connection>
	<Variable name="file" type="string">
		<Description>Site file to be tested</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="test" type="string">
		<Description>A list of values for all SQL Injection tests to be performed</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="combinations" type="string">
		<Description>List of parameter combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="path" type="string">
		<Description>List of combinations for this test</Description>
		<Item encoding="Text">${file}${combinations}</Item>
	</Variable>
	<Variable name="post" type="string">
		<Description>Values for POST</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="filename" type="string">
		<Description>Site filename</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="cookie" type="string">
		<Description>List of cookie combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="headers" type="string">
		<Description>List of header combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
</WebApplicationTest>