<?xml version="1.0" standalone="no"?>
<WebApplicationTest>
	<TestDescription name="PHP Zend_Hash_Del_Key_Or_Index vulnerability" version="0.1" released="20060807" updated="20140228" protocol="HTTP" mayproxy="true" affects="file" severity="high" alert="success" type="Configuration">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="${file}" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" DetaliedInformation="" FolowRedirection="false" SendCookies="true" AlertTags="missing_update" CVE="CVE-2006-3017" CWE="CWE-702" CVSSVer="2.0" CVSSScore="9.4" CVSSDescr="AV:N/AC:M/Au:N/C:C/I:C/A:C/E:POC/RL:OF/RC:C" CVSSScoreTemp="7.4" CVSSScoreEnv="7.3"/>
		<Reference database="Zend_Hash_Del_Key_Or_Index Vulnerability" URL="http://www.hardened-php.net/hphp/zend_hash_del_key_or_index_vulnerability.html"/>
		<Copyright/>
		<Description>[coolbox][dark]This alert was generated using only banner information. It may be a false positive.  [/dark][/coolbox][break]Stefan Esser had discovered a weakness within the depths of the implementation of hashtables in the Zend Engine. This vulnerability affects a large number of PHP applications. It creates large new holes in many popular PHP applications. Additonally many old holes that were disclosed in the past were only fixed by using the unset() statement. Many of these holes are still open if the already existing exploits are changed by adding the correct numerical keys to survive the unset(). For a detailed explanation of the vulnerability read the referenced article.[break][break][navy]Affected PHP versions (up to 4.4.2/5.1.3).[/navy][break]</Description>
		<ApplicableTo>
			<Platform>
				<OS>All</OS>
				<Arch>i386</Arch>
			</Platform>
			<WebServer>All</WebServer>
			<ApplicationServer>PHP</ApplicationServer>
		</ApplicableTo>
		<TriggerOn event="scheme_host_port">
			<Match type="regex">.*</Match>
		</TriggerOn>
		<Impact>Possible code execution, SQL injection, ...</Impact>
		<Recommendation>Upgrade PHP to the latest version.</Recommendation>
		<Reference database="PHP Homepage" URL="http://www.php.net"/>
	</TestDescription>
	<Connection scheme="" host="" port="">
		<Step name="first">
			<Request>
				<MessageHeader>
					<Method>GET</Method>
					<URI>path</URI>
					<Version>HTTP/1.0</Version>
				</MessageHeader>
				<MessageBody>
					<Separator/>
				</MessageBody>
			</Request>
			<Response>
				<SetVariable name="ResponseCode" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="status">^.*\s(\d\d\d)\s</Source>
				</SetVariable>
				<SetVariable name="FullBody" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="body">^(.*)$</Source>
				</SetVariable>
				<SetVariable name="redir302" type="string">
					<Description>Check to see if we are being redirected to another page</Description>
					<Source source="header">^Location: (.*)$</Source>
				</SetVariable>
			</Response>
			<TestCriteria type="success">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>200</Value>
					<Compare variable="${IsCustom404}" test="eq">
						<Value>false</Value>
					</Compare>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>404</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>302</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="neq">
					<Value>200</Value>
				</Compare>
			</TestCriteria>
		</Step>
	</Connection>
</WebApplicationTest>
