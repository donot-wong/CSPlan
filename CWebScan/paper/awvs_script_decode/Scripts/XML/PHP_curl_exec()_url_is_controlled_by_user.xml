<?xml version="1.0" encoding="utf-8"?>
<WebApplicationTest>
	<TestDescription name="PHP curl_exec() url is controlled by user" version="0.1" released="20091118" updated="20140304" protocol="HTTP" mayproxy="true" affects="file" severity="medium" alert="success" type="Validation">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" FolowRedirection="false" DetaliedInformation="" SendCookies="true" AlertTags="information_disclosure,denial_of_service,abuse_of_functionality" HasPrecondition="false" SendAuth="true" ValidateSession="true" CVE="CVE-2009-0037" CWE="CWE-352" CVSSVer="2.0" CVSSScore="6.8" CVSSDescr="AV:N/AC:M/Au:N/C:P/I:P/A:P/E:POC/RL:OF/RC:C" CVSSScoreTemp="5.4" CVSSScoreEnv="5.4" CVSS3Descr="CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N"></WASPDescription>
		<Copyright></Copyright>
		<Description>[coolbox][dark]Manual confirmation is required for this alert.[/dark][/coolbox][break]
This script is using the PHP function [bold]curl_exec()[/bold]. The url used by curl is based on user input. This is not recommended as it can lead to various vulnerabilities. [break][break]For example, an attacker can use the [bold]file://[/bold] protocol to read arbitrary files from the server (by using an url like [bold]file:///etc/passwd[/bold]). It's also possible to access computers behind the firewall using URLs like [bold]http://192.168.0.1 or ftp://192.168.0.1.[/bold][break][break]
An older version of libcurl compiled to support SCP can get tricked to get a file using embedded semicolons, which can lead to execution of  commands on the given server. "scp://name:passwd@host/a'``;date &gt;/tmp/test``;'".
[break]</Description>
		<ApplicableTo>
			<Platform>
				<OS>All</OS>
				<Arch>i386</Arch>
			</Platform>
			<WebServer>All</WebServer>
			<ApplicationServer>PHP</ApplicationServer>
		</ApplicableTo>
		<TriggerOn event="scheme_host_port">
			<Match type="regex">.*</Match>
		</TriggerOn>
		<Impact>Possible local file disclosure.</Impact>
		<Recommendation>The user should not be able to control the url used by curl_exec(). You need to review the source code of this script and make the necessary adjustments. If possible, you should create a whitelist of accepted URLs and/or deny the usage of file:// protocol.</Recommendation>
		<Reference database="curl_exec" URL="http://php.net/manual/en/function.curl-exec.php"></Reference>
		<Reference database="libcurl Arbitrary File Access" URL="http://curl.haxx.se/docs/adv_20090303.html"></Reference>
	</TestDescription>
	<Connection scheme="${scheme}" host="${host}" port="${port}">
		<Step name="testfile">
			<Request>
				<MessageHeader>
					<Method>GET</Method>
					<URI>${scheme}://${host}:${port}${path}</URI>
					<Version>HTTP/1.0</Version>
				</MessageHeader>
				<MessageBody>
					<Separator></Separator>
					<Item encoding="text">${post}</Item>
				</MessageBody>
			</Request>
			<Response>
				<SetVariable name="AspectDataQuery" type="aspectdata">
					<Description>Query the AspectData items</Description>
					<Source source="body">^(.*)$</Source>
				</SetVariable>
			</Response>
			<TestCriteria type="success">
				<Compare variable="${AspectDataQuery}" test="cont">
					<Value>key=CURL_Exec;param.0=ACUSTART</Value>
				</Compare>
			</TestCriteria>
		</Step>
	</Connection>
	<Variable name="file" type="string">
		<Description>Site file to be tested</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="filename" type="string">
		<Description>Site filename</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="combinations" type="string">
		<Description>List of parameter combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="post" type="string">
		<Description>Values for POST</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="path" type="string">
		<Description>List of combinations for this test</Description>
		<Item encoding="Text">${file}${combinations}</Item>
	</Variable>
	<Variable name="cookie" type="string">
		<Description>Cookie combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="headers" type="string">
		<Description>Headers combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="test" type="string">
		<Description>A list of values for all SQL Injection tests to be performed</Description>
		<Item encoding="Text">test</Item>
	</Variable>
</WebApplicationTest>