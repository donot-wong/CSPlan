<?xml version="1.0" standalone="no"?>
<WebApplicationTest>
	<TestDescription name="PHP HTML entity encoder heap overflow vulnerability" version="0.1" released="20061103" updated="20140304" protocol="HTTP" mayproxy="true" affects="file" severity="high" alert="success" type="Configuration">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="${file}" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" DetaliedInformation="" FolowRedirection="false" SendCookies="true" AlertTags="denial_of_service,missing_update" CVE="CVE-2006-5465" CWE="CWE-119" CVSSVer="2.0" CVSSScore="7.5" CVSSDescr="AV:N/AC:L/Au:N/C:P/I:P/A:P/E:H/RL:OF/RC:C" CVSSScoreTemp="6.6" CVSSScoreEnv="6.5"/>
		<Reference database="PHP HTML Entity Encoder Heap Overflow Vulnerability" URL="http://www.hardened-php.net/advisory_132006.138.html"/>
		<Copyright/>
		<Description>[coolbox][dark]This alert was generated using only banner information. It may be a false positive.  [/dark][/coolbox][break]Stefan Esser reported some vulnerabilities in PHP, which can be exploited by malicious people to cause a DoS (Denial of Service) or potentially compromise a vulnerable system.The vulnerabilities are caused due to boundary errors within the "htmlentities()" and "htmlspecialchars()" functions. If a PHP application uses these functions to process user-supplied input, this can be exploited to cause a heap-based buffer overflow by passing specially crafted data to the affected application.
Successful exploitation may allow execution of arbitrary code, but requires that the UTF-8 character set is selected. For a detailed explanation of the vulnerability read the referenced article.[break]Vendor has released PHP 5.2.0 which fixes this issue.[break][break][navy]Affected PHP versions (up to 4.4.4/5.1.6).[/navy][break]</Description>
		<ApplicableTo>
			<Platform>
				<OS>All</OS>
				<Arch>i386</Arch>
			</Platform>
			<WebServer>All</WebServer>
			<ApplicationServer>PHP</ApplicationServer>
		</ApplicableTo>
		<TriggerOn event="scheme_host_port">
			<Match type="regex">.*</Match>
		</TriggerOn>
		<Impact>Denial of service, remote code execution.</Impact>
		<Recommendation>Upgrade PHP to the latest version.</Recommendation>
		<Reference database="PHP Homepage" URL="http://www.php.net"/>
	</TestDescription>
	<Connection scheme="" host="" port="">
		<Step name="first">
			<Request>
				<MessageHeader>
					<Method>GET</Method>
					<URI>path</URI>
					<Version>HTTP/1.0</Version>
				</MessageHeader>
				<MessageBody>
					<Separator/>
				</MessageBody>
			</Request>
			<Response>
				<SetVariable name="ResponseCode" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="status">^.*\s(\d\d\d)\s</Source>
				</SetVariable>
				<SetVariable name="FullBody" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="body">^(.*)$</Source>
				</SetVariable>
				<SetVariable name="redir302" type="string">
					<Description>Check to see if we are being redirected to another page</Description>
					<Source source="header">^Location: (.*)$</Source>
				</SetVariable>
			</Response>
			<TestCriteria type="success">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>200</Value>
					<Compare variable="${IsCustom404}" test="eq">
						<Value>false</Value>
					</Compare>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>404</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>302</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="neq">
					<Value>200</Value>
				</Compare>
			</TestCriteria>
		</Step>
	</Connection>
</WebApplicationTest>
