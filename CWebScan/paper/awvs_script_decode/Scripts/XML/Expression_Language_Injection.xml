<?xml version="1.0" encoding="utf-8"?>
<WebApplicationTest>
	<TestDescription name="Expression language injection" version="0.1" released="20060608" updated="20140307" protocol="HTTP" mayproxy="true" affects="file" severity="high" alert="success" type="Validation">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" FolowRedirection="true" DetaliedInformation="" SendCookies="true" AlertTags="ldap_injection" CVE="" CWE="CWE-917" CVSSVer="2.0" CVSSScore="5.8" CVSSDescr="AV:N/AC:M/Au:N/C:P/I:P/A:N" CVSSScoreTemp="5.9" CVSSScoreEnv="5.8" CVSS3Descr="CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N"></WASPDescription>
		<Copyright></Copyright>
		<Description>This script is possibly vulnerable to Expression Language Injection attacks.[break][break]To provide easy ways of outputting data from an object model that more closely resembles pure scripting languages, Expression Language (EL) was developed as part of JSTL (Java Server Pages Standard Tag Library). [break][break]
JSP EL is a specification (JSR-245 and JSR 252 [2]) and there are many implementations:
[li] JSP 2.0/2.1: Used by most recently built applications, and delivered as part of the JSTL.[/li]
[li] Jakarta: An older EL implementation built by Apache.[/li]
[li] OGNL: A powerful EL popularized by Struts2/WebWork.[/li]
[li] MVEL: A general purpose EL usable for console applications.[/li]
[li] SPEL: Springs custom EL for scripting (not used in JSPs).[/li] [break][break]
Expression Language Injection occurs when user input is evaluated by a J2EE servers
Expression Language resolvers, and a common opportunity for this vulnerability to occur today
is with the usage of Spring JSP tags.</Description>
		<ApplicableTo>
			<Platform>
				<OS>All</OS>
				<Arch>i386</Arch>
			</Platform>
			<WebServer>All</WebServer>
			<ApplicationServer>All</ApplicationServer>
		</ApplicableTo>
		<TriggerOn event="scheme_host_port">
			<Match type="regex">.*</Match>
		</TriggerOn>
		<Impact>The impacts of this attack range from a simple HttpOnly bypass to a server-side information
leakage technique. This information leakage will differ in severity mostly based on what J2EE
technologies are in use and what is in scope of the vulnerable code. One of the most dangerous
abuse scenarios involves an attacker controlled page inferring a users session ID on a browser
thats currently logged into the vulnerable application.</Impact>
		<Recommendation>Perform data validation best practice against untrusted input and to ensure that output encoding is applied when data arrives on the EL layer, so that
no metacharacter is found by the interpreter within the user content before evaluation. The most obvious patterns to detect include ${ and #{, but it may be possible to encode or fragment this data.</Recommendation>
		<Reference database="Expression Language Injection" URL="http://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf"></Reference>
	</TestDescription>
	<Connection scheme="${scheme}" host="${host}" port="${port}">
		<Step name="testfile">
			<Request>
				<MessageHeader>
					<Method>GET</Method>
					<URI>${scheme}://${host}:${port}${path}</URI>
					<Version>HTTP/1.0</Version>
				</MessageHeader>
				<MessageBody>
					<Separator></Separator>
					<Item encoding="text">${post}</Item>
				</MessageBody>
			</Request>
			<Response>
				<SetVariable name="ResponseCode" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="status">^.*\s(\d\d\d)\s</Source>
				</SetVariable>
				<SetVariable name="FullBody" type="string">
					<Description>The HTTP Response Code</Description>
					<Source source="body">^(.*)$</Source>
				</SetVariable>
				<SetVariable name="redir302" type="string">
					<Description>Check to see if we are being redirected to another page</Description>
					<Source source="header">^Location: (.*)$</Source>
				</SetVariable>
				<SetVariable name="LDAPtest1" type="string">
					<Description>LDAP error</Description>
					<Source source="body">(?i)(IPWorksASP\.LDAP.*800a4f70.*\[335\]\s\(no description\savailable\))</Source>
				</SetVariable>
				<SetVariable name="LDAPtest2" type="string">
					<Description>LDAP error 2</Description>
					<Source source="body">(?i)(&lt;span&gt;&lt;H1&gt;Server Error in '.*?' Application.*&lt;h2&gt;\s&lt;i&gt;The.*search filter is invalid\.&lt;/i&gt;)</Source>
				</SetVariable>
			</Response>
			<TestCriteria type="success">
				<Compare variable="${ResponseCode}" test="neq">
					<Value>404</Value>
					<Compare variable="${IsCustom404}" test="eq">
						<Value>false</Value>
						<Compare variable="${LDAPtest1}" test="neq">
							<Value></Value>
						</Compare>
						<Compare variable="${LDAPtest2}" test="neq">
							<Value></Value>
						</Compare>
					</Compare>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>404</Value>
				</Compare>
			</TestCriteria>
			<TestCriteria type="failure">
				<Compare variable="${ResponseCode}" test="eq">
					<Value>302</Value>
				</Compare>
			</TestCriteria>
		</Step>
	</Connection>
	<Variable name="file" type="string">
		<Description>Site file to be tested</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="test" type="string">
		<Description>A list of values for all SQL Injection tests to be performed</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="combinations" type="string">
		<Description>List of parameter combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="path" type="string">
		<Description>List of combinations for this test</Description>
		<Item encoding="Text">${file}${combinations}</Item>
	</Variable>
	<Variable name="post" type="string">
		<Description>Values for POST</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="filename" type="string">
		<Description>Site filename</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="cookie" type="string">
		<Description>List of cookie combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
	<Variable name="headers" type="string">
		<Description>List of header combinations</Description>
		<Item encoding="Text">test</Item>
	</Variable>
</WebApplicationTest>