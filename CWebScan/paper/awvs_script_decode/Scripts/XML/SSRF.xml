<?xml version="1.0" encoding="utf-8"?>
<WebApplicationTest>
	<TestDescription name="Server side request forgery" version="0.1" released="20080307" updated="20140227" protocol="FTP" mayproxy="false" affects="server" severity="high" alert="success" type="Configuration">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" DetaliedInformation="" AlertTags="ssrf" CVE="" CWE="CWE-918" CVSSVer="2.0" CVSSScore="5.8" CVSSDescr="AV:N/AC:M/Au:N/C:P/I:P/A:N" CVSSScoreTemp="5.9" CVSSScoreEnv="5.7" CVSS3Descr="CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H"></WASPDescription>
		<Copyright></Copyright>
		<Description>SSRF as in Server Side Request Forgery is a vulnerability that allows an attacker to force server interfaces into sending packets initiated by the victim server to the local interface or to another server behind the firewall. Consult Web References for more information about this problem.</Description>
		<ApplicableTo>
			<Platform>
				<OS>*</OS>
				<Arch>*</Arch>
			</Platform>
			<WebServer>*</WebServer>
			<ApplicationServer>*</ApplicationServer>
		</ApplicableTo>
		<Impact>The impact varies according to the affected server interface.</Impact>
		<Recommendation>Your script should properly sanitize user input.</Recommendation>
		<Reference database="SSRF VS. BUSINESS-CRITICAL APPLICATIONS" URL="https://media.blackhat.com/bh-us-12/Briefings/Polyakov/BH_US_12_Polyakov_SSRF_Business_Slides.pdf"></Reference>
	</TestDescription>
</WebApplicationTest>