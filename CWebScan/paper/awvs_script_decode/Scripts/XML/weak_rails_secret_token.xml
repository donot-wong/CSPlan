<?xml version="1.0" encoding="utf-8"?>
<WebApplicationTest>
	<TestDescription name="Ruby on Rails weak/known secret token" version="0.1" released="20080307" updated="20140227" protocol="FTP" mayproxy="false" affects="server" severity="high" alert="success" type="Configuration">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" DetaliedInformation="" AlertTags="code_execution,configuration" CVE="CVE-2013-0156" CWE="CWE-200" CVSSVer="2.0" CVSSScore="7.5" CVSSDescr="AV:N/AC:L/Au:N/C:P/I:P/A:P/E:F/RL:OF/RC:C" CVSSScoreTemp="6.2" CVSSScoreEnv="6.2" CVSS3Descr="CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"></WASPDescription>
		<Copyright></Copyright>
		<Description>Each Ruby on Rails web application contains a secret token (usually stored in the file [bold]secret_token.rb[/bold]). This token [bold]secret_token[/bold] is used to sign cookies that the application sets. Without this, it's impossible to trust cookies that the browser sends, and hence difficult to rely on session based authentication. It's very important that an attacker doesn't know the value of this secret token. Your application is using a weak/known token and Acunetix WVS managed to guess this token. Knowing the secret token allows an attacker to impersonate any user in the application and even achive Remote Code Execution by deserialization of a crafted Ruby Object.</Description>
		<ApplicableTo>
			<Platform>
				<OS>*</OS>
				<Arch>*</Arch>
			</Platform>
			<WebServer>*</WebServer>
			<ApplicationServer>*</ApplicationServer>
		</ApplicableTo>
		<Impact>An attacker can impersonate any user in the application and achive Remote Code Execution by deserialization of a crafted Ruby Object.</Impact>
		<Recommendation>Change the value of the secret_token (from RAILS_ROOT/config/initializers/secret_token.rb) to a random string.</Recommendation>
		<Reference database="How to hack a Rails app using its secret_token" URL="http://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/"></Reference>
		<Reference database="Rails Insecure Defaults" URL="http://blog.codeclimate.com/blog/2013/03/27/rails-insecure-defaults/"></Reference>
		<Reference database="Ruby on Rails Known Secret Session Cookie Remote Code Execution" URL="http://www.rapid7.com/db/modules/exploit/multi/http/rails_secret_deserialization"></Reference>
		<Reference database="Rails 3.2.10 Remote Code Execution" URL="https://charlie.bz/blog/rails-3.2.10-remote-code-execution"></Reference>
	</TestDescription>
</WebApplicationTest>